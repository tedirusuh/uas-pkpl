# Nama alur kerja yang akan tampil di tab "Actions" GitHub
name: CI/CD Pipeline untuk Aplikasi Flask

# Pemicu: Kapan alur kerja ini dijalankan?
on:
  push:
    branches: [ "main" ] # Saat ada push ke branch 'main'
  pull_request:
    branches: [ "main" ] # Saat ada pull request ke branch 'main'

# Daftar pekerjaan (jobs) yang harus dilakukan
jobs:
  test-and-build: # Nama pekerjaan, bisa apa saja
    runs-on: ubuntu-latest # Pekerjaan ini akan berjalan di server virtual Ubuntu

    steps: # Langkah-langkah yang akan dieksekusi secara berurutan
    # Langkah 1: Mengunduh kode dari repositori Anda ke server virtual
    - name: Checkout kode dari repositori
      uses: actions/checkout@v4

    # Langkah 2: Menginstal Python versi 3.9 di server virtual
    - name: Setup Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: 3.9

    # Langkah 3: Menginstal semua library dari requirement.txt
    - name: Install dependensi Python
      run: |
        python -m pip install --upgrade pip
        pip install -r requirement.txt

    # Langkah 4: Menjalankan unit test
    # Jika perintah `pytest` gagal, seluruh alur kerja akan berhenti di sini
    - name: Jalankan Unit Tests dengan pytest
      run: pytest

    # Langkah 5: Login ke Docker Hub
    # Menggunakan "secrets" agar username dan password Anda tidak terekspos di kode
    - name: Login ke Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Langkah 6: Membangun image dari Dockerfile dan mendorongnya (push) ke Docker Hub
    - name: Build dan Push Docker image
      uses: docker/build-push-action@v5
      with:
        context: . # Konteks build adalah direktori root proyek
        push: true # Memberi tahu aksi untuk melakukan `push` setelah `build`
        tags: tedirusli/uas-pkpl-app:latest # Label untuk image Anda